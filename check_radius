#!/usr/bin/perl -w

use strict;
use Getopt::Long;
use File::Basename;
use Time::HiRes qw(gettimeofday tv_interval);;

my $version =	"20140227";
my $host =	"localhost";
my $port =	18120;
my $debug =	0;
my $w =		3;
my $c =		5;
my $t =		10;
my $filename;
my $secret;
my $secretfile;
my $status;

my $radclient =	"/usr/local/bin/radclient";

my %ERRORS =	('OK'=>0,'WARNING'=>1,'CRITICAL'=>2,'UNKNOWN'=>3,'DEPENDENT'=>4);
my %ERRORSREV = reverse(%ERRORS);



sub usage() {
	my $basename = basename($0);

print <<DATA;

	Version: $version
	$basename [-h] [-d] [-H hostname] [-P port] [-w warning] [-c critical] [-t timeout] -s secret

	-h|--help	This help screen
	-d|--debug	Activate debug mode
	-H|--hostname	Hostname to send query, can also be comma-delimited list of hosts to check [Default: $host]
	-P|--port	Port where status server is listening [Default: $port]
	-w|--warning	Warning threshold in seconds [Default: $w]
	-c|--critical	Critical threshold in seconds [Default: $c]
	-t|--timeout	Timeout [Default: $t]
	-s|--secret	Secret
	-S|--secretfile	File storing the secret
	-b|--radclient 	Path to the radclient binary [Default: $radclient]

	If a comma-separated list is given to -H each host will be checked and the status will
	reflect the following set of conditions:
	OK - All hosts in the list responed within the threshold
	WARNING - At least one host in the list responded within the WARNING threshold
	CRITICAL - At least one host in the list responded within the CRITICAL threshold

	Plugin to check radius status. It use the radclient program from FreeRADIUS project
	(http://www.freeradius.org) and use the Status-Server packet to perform tests. See
	http://wiki.freeradius.org/Status on how to configure it.

	The plugin output performance data about elapsed time executing the query.

DATA

	exit $ERRORS{'UNKNOWN'};
}

sub check_options () {
	my $o_help;
	my $o_debug;

	Getopt::Long::Configure ("bundling");
	GetOptions(
		'h|help'	=> \$o_help,
		'd|debug'	=> \$o_debug,
		'H|hostname:s'	=> \$host,
		'P|port:i'	=> \$port,
		'w|warning:i'	=> \$w,
		'c|critical:i'	=> \$c,
		't|timeout:s'	=> \$t,
		's|secret:s'	=> \$secret,
		'S|secretfile:s' => \$secretfile,
		'b|radclient:s' => \$radclient,
	
	);

	usage() if (defined($o_help));
	$debug = 1 if (defined($o_debug));
	if ( $port !~ /^\d+$/ or ($port <= 0 or $port > 65535)) {
		print "\nPlease insert an integer value between 1 and 65535\n";
		usage();
	}
	if ( $w !~ /^\d+$/ or $w <= 0) {
		print "\nPlease insert an integer value as warning threshold\n";
		usage();
	}
	if ( $c !~ /^\d+$/ or $c <= 0) {
		print "\nPlease insert an integer value as critical threshold\n";
		usage();
	}
	if ( $t !~ /^\d+$/ or $t < $c) {
		print "\nPlease insert an integer value greater than $c\n";
		usage();
	}
	if ( !defined($secret) and !defined($secretfile) ) {
		print "\nPlease supply the secret/secret file for $host\n";
		usage();
	}
	if ( defined($secretfile) and ! -f $secretfile ) {
		print "Please supply a valid file as the secret file\n";
		usage();
	}
	if ( defined($radclient) and ! -x $radclient) {
		print "Please supply a valid executable binary for radclient\n";
		usage();
	}
}

#
# Main
#
check_options();

# Assume everyone responded in time
$status = $ERRORS{'OK'};
my @summary;

foreach my $hostname (split(/,/, $host)) {
	# this is a little messy, maybe to clean this up in the future?
	my $cmd = "echo \"Message-Authenticator = 0x00\" | $radclient -q -c 1 -r 1 -t $t ";
	if (defined($secretfile)) {
		$secret = "-S $secretfile";
		$cmd .= "$secret $hostname:$port status 2>/dev/null";
	} else {
		$cmd .= "$hostname:$port status $secret 2>/dev/null";
	}
	$cmd .= " -x" if $debug;

	print "DEBUG: radclient command: $cmd\n" if $debug;

	my $t0 = [gettimeofday];
	system($cmd);
	my $elapsed = tv_interval($t0);
	$status = $ERRORS{'WARNING'} if ( $elapsed >= $w );
	$status = $ERRORS{'CRITICAL'} if ( $elapsed >= $c or $? !=0 );

	push(@summary, "$hostname ($elapsed sec): $ERRORSREV{$status}");

	print "DEBUG ($hostname): Elapsed time: $elapsed seconds\n" if $debug;
	print "DEBUG ($hostname): radclient exit status: $?\n" if $debug;
	print "DEBUG ($hostname): plugin exit status: $status\n" if $debug;
}

#$status = $ERRORS{'OK'} if ( $elapsed < $w );


print $ERRORSREV{$status} . ": (w:$w;c:$c;t:$t) ";
print join('; ', @summary),"\n";
#print "Radius response time $elapsed seconds";
#print " | ";
#print "'Response Time'=$elapsed;$w;$c;0;$t\n";

exit $status;

